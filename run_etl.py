# # import yaml
# # import logging
# # from pathlib import Path
# # from analytics import analysis, visualization
# # from utils import validation, profiling
# # from utils.cfg_tool import ConfigLoader, ConfigValidator, load_schema
# # from utils.generation import SQLiteGenerator
# # from src import extract, transform, load

# # logging.basicConfig(
# #     level=logging.INFO,
# #     format="%(asctime)s - %(levelname)s - %(message)s",
# #     datefmt="%H:%M:%S",
# # )

# # CONFIG_DIR = Path("cfg/")
# # SCHEMA_PATH = CONFIG_DIR / "schema/cfg_validation_schema.yaml"


# # def validate_configs():
# #     schema = load_schema(SCHEMA_PATH)
# #     loader = ConfigLoader(schema)
# #     validator = ConfigValidator(loader, CONFIG_DIR)

# #     result = validator.validate_all()
# #     print(result)

# #     if "–Ω–µ –ø—Ä–æ—à–ª–∏" in result:
# #         raise ValueError("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")


# # def load_yaml(path: Path):
# #     return yaml.safe_load(path.read_text(encoding="utf-8"))


# # def main():
# #     """
# #     –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ–¥ SQLite.
# #     """
# #     print("\nüì¶ –ó–∞–ø—É—Å–∫ ETL-–ø–∞–π–ø–ª–∞–π–Ω–∞\n")

# #     # === –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ ===
# #     try:
# #         validate_configs()
# #     except Exception as e:
# #         logging.error(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")
# #         return

# #     base_cfg = load_yaml(CONFIG_DIR / "base_cfg.yaml")
# #     gen_cfg = load_yaml(CONFIG_DIR / "generation_cfg.yaml")
# #     ext_cfg = load_yaml(CONFIG_DIR / "extraction_cfg.yaml")
# #     tr_cfg = load_yaml(CONFIG_DIR / "transformation_cfg.yaml")
# #     val_cfg = load_yaml(CONFIG_DIR / "validation_cfg.yaml")
# #     prof_cfg = load_yaml(CONFIG_DIR / "profiling_cfg.yaml")
# #     load_cfg = load_yaml(CONFIG_DIR / "load_cfg.yaml")
# #     anl_cfg = load_yaml(CONFIG_DIR / "analytics_cfg.yaml")

# #     # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
# #     gen_input = input("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ë–î? (y/n): ").strip().lower()
# #     match gen_input:
# #         case "y":
# #             db_name = input(
# #                 "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ë–î (Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞): "
# #             ).strip()
# #             db_path = input(
# #                 "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î (Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞): "
# #             ).strip()
# #             if not db_path:
# #                 db_path = gen_cfg["sqlite"]["db_path"]
# #             SQLiteGenerator(gen_cfg["sqlite"]).create_db(db_name=db_name)
# #         case "n":
# #             db_path = input(
# #                 "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î (Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞): "
# #             ).strip()
# #             if not db_path:
# #                 db_path = ext_cfg["sqlite"]["db_path"]
# #         case _:
# #             pass

# #     # === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
# #     print("\nüöõ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
# #     extractor = extract.SQLiteExtractor(sqlite_cfg=ext_cfg["sqlite"])
# #     raw_data = extractor.extract()

# #     # === –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å –≤—ã–±–æ—Ä–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π) ===
# #     print("\nüß™ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: drop_nulls, normalize, –∏ —Ç.–¥.")
# #     t_ops = input(
# #         "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω—É–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): "
# #     ).strip()
# #     if t_ops:
# #         operations = [op.strip() for op in t_ops.split(",")]
# #         transformer = transform.DataTransformer(tr_cfg)
# #         transformer.transform(extractor.extract(), operations)

# #     # === –í–∞–ª–∏–¥–∞—Ü–∏—è ===
# #     print("\n‚úîÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥)...")
# #     validate.run(base_cfg, db_path)

# #     # === –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ===
# #     prof_input = input("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ? (y/n): ").strip().lower()
# #     if prof_input == "y":
# #         path = input(
# #             "–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (Enter ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥): "
# #         ).strip()
# #         profile_path = path or base_cfg["profile"]["output_path"]
# #         profile.run(db_path, profile_path)

# #     # === –ó–∞–≥—Ä—É–∑–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é –∏–ª–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É) ===
# #     print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–µ–ª–µ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
# #     target_path = input(
# #         "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (Enter ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥): "
# #     ).strip()
# #     target_path = target_path or base_cfg["load"]["target_path"]
# #     load.run(db_path, target_path)

# #     # === –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ===
# #     if input("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É? (y/n): ").strip().lower() == "y":
# #         if input("–í–≤–µ—Å—Ç–∏ SQL-–∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é? (y/n): ").strip().lower() == "y":
# #             query = input("–í–≤–µ–¥–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å: ")
# #             analyze.run_custom_query(db_path, query)
# #         else:
# #             print("–ó–∞–ø—Ä–æ—Å—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞:")
# #             for i, q in enumerate(base_cfg["analytics"]["queries"]):
# #                 print(f"{i}: {q['name']}")
# #             q_idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: "))
# #             analyze.run_configured_query(
# #                 db_path, base_cfg["analytics"]["queries"][q_idx]
# #             )

# #     # === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ===
# #     if input("–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? (y/n): ").strip().lower() == "y":
# #         visualize.run(db_path)

# #     print("\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.")


# # if __name__ == "__main__":
# #     try:
# #         main()
# #     except Exception as e:
# #         logging.exception("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞:")


# """
# main.py

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ logger_initializer –∏ cfg_tool.
# –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ VS Code –±–µ–∑ CLI.
# """

# import logging
# from pathlib import Path

# from logger_initializer import init_logger
# from cfg_tool import load_schema, ConfigLoader, ConfigValidator

# def main():
#     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
#     init_logger(level=logging.DEBUG)
#     logger = logging.getLogger(__name__)
#     logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

#     # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
#     cfg_dir = Path("cfg")
#     schema_path = Path("cfg/schema/cfg_validation_schema.yaml")

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ö–µ–º—ã
#     if not schema_path.exists():
#         logger.error(f"–§–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {schema_path}")
#         return

#     # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã
#     try:
#         schema = load_schema(schema_path)
#     except Exception as e:
#         logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ö–µ–º—ã: {e}")
#         return

#     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
#     loader = ConfigLoader(schema)
#     validator = ConfigValidator(loader, cfg_dir)

#     # –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
#     result = validator.validate_all()
#     logger.info(result)

# if __name__ == "__main__":
#     main()
#!/usr/bin/env python3
import argparse
import sys
from pathlib import Path

from utils.cfg_tool import ConfigLoader, ConfigValidator
from logger_initializer import LoggerInitializer

def parse_args():
    parser = argparse.ArgumentParser(
        description="–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç ETL-–ø–∞–π–ø–ª–∞–π–Ω–∞: –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤, –∏—Ö –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    parser.add_argument(
        "--base",
        "-b",
        type=Path,
        required=True,
        help="–ü—É—Ç—å –∫ base_cfg.yaml",
    )
    parser.add_argument(
        "--log",
        "-l",
        type=Path,
        required=True,
        help="–ü—É—Ç—å –∫ log_cfg.yaml",
    )
    parser.add_argument(
        "--schema",
        "-s",
        type=Path,
        default=Path("cfg/schema/cfg_validation_schema.yaml"),
        help="–ü—É—Ç—å –∫ —Å—Ö–µ–º–µ JSON Schema",
    )
    parser.add_argument(
        "--bootstrap",
        action="store_true",
        help="–ó–∞–ø—É—Å–∫ –≤ bootstrap-—Ä–µ–∂–∏–º–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç log_cfg)",
    )
    return parser.parse_args()

def main():
    args = parse_args()

    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    schema = load_schema(args.schema)
    validator = ConfigValidator(schema)

    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è base_cfg
    loader = ConfigLoader()
    try:
        base_cfg = loader.load_config(args.base)
        validator.validate(base_cfg, args.base.stem)
    except Exception as e:
        print(f"[ERROR] –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ base_cfg: {e}", file=sys.stderr)
        sys.exit(1)

    # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è log_cfg (–µ—Å–ª–∏ –Ω–µ bootstrap)
    if args.bootstrap:
        log_cfg = {}
    else:
        try:
            log_cfg = loader.load_config(args.log)
            validator.validate(log_cfg, args.log.stem)
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ log_cfg: {e}", file=sys.stderr)
            sys.exit(1)

    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    cfg = {"base_cfg": base_cfg, "log_cfg": log_cfg}
    logger_init = LoggerInitializer(cfg, bootstrap_mode=args.bootstrap)

    # 5. –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è —Å—Ç–∞–¥–∏–π
    stages = log_cfg.get("stages", {}) if not args.bootstrap else {}
    loggers = {}
    for stage in stages:
        lg = logger_init.init_logger(stage)
        if lg:
            loggers[stage] = lg

    # 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    # (–ø—Ä–∏–º–µ—Ä: –±–µ—Ä–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ base_cfg –∏ –ª–æ–≥–∏—Ä—É–µ–º)
    sources = base_cfg.get("sources", [])
    loading_logger = loggers.get("loading")
    if loading_logger:
        for src in sources:
            name = src.get("name", "<unknown>")
            enabled = src.get("enabled", False)
            success = src.get("success", None)
            error = src.get("error", None)
            tables = src.get("tables_loaded", 0)
            rows = src.get("rows_loaded", 0)
            logger_init.log_loading_result(
                loading_logger, name, enabled, success, error, tables, rows
            )

    # TODO: –∑–¥–µ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–∞–π–ø–ª–∞–π–Ω–∞

if __name__ == "__main__":
    from utils.cfg_tool import load_schema
    main()
